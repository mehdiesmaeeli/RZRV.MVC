@using RZRV.APP.ViewModels
@model ChatViewModel
@{
    ViewData["Title"] = "Chat";
}

<div class="container">
    <div class="row">
        <!-- Users List -->
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5>Users</h5>
                </div>
                <div class="card-body users-list">
                    @foreach (var user in Model.Users.Where(u => u.Id != Model.CurrentUserId))
                    {
                        <div class="user-item d-flex align-items-center p-2" onclick="selectUser('@user.Id', '@user.UserName')">
                            <img src="@Url.Action("GetAvatar", "User", new { fileName = user.AvatarPath })" class="rounded-circle mr-2" style="width: 40px; height: 40px;" />
                            <div>
                                <h6 class="mb-0">@user.UserName</h6>
                                <small class="text-muted">@(Model.UserStatuses?.GetValueOrDefault(user.Id, "Offline"))</small>
                            </div>
                            @if (Model.UnreadMessageCounts?.GetValueOrDefault(user.Id, 0) > 0)
                            {
                                <span class="badge badge-primary ml-auto">@Model.UnreadMessageCounts[user.Id]</span>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Chat Area -->
        <div class="col-md-8">
            <div class="card">
                <div class="card-header" id="selectedUserHeader">
                    <h5>Select a user to start chatting</h5>
                </div>
                <div class="card-body chat-messages" id="messagesList">
                    <!-- Messages will be loaded here -->
                </div>
                <div class="card-footer">
                    <div class="input-group">
                        <input type="text" id="messageInput" class="form-control" placeholder="Type your message..." />
                        <div class="input-group-append">
                            <button class="btn btn-primary" onclick="sendMessage()">Send</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
    <script>
        let selectedUserId = '';
        let selectedUserName = '';
        const currentUserId = '@Model.CurrentUserId';

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

        function formatDateTime(dateString) {
            const d = new Date(dateString);
            const options = {
                hour: '2-digit',
                minute: '2-digit',
                hour12: false
            };
            return d.toLocaleString('fa-IR', options);
        }

        connection.on("ReceiveMessage", (message) => {
            appendMessage(message);
        });

        function selectUser(userId, userName) {
            selectedUserId = userId;
            selectedUserName = userName;
            document.getElementById("selectedUserHeader").innerHTML = `<h5>Chat with ${userName}</h5>`;
            loadMessages(userId);
        }

        function appendMessage(message) {
            const messagesList = document.getElementById("messagesList");
            const messageDiv = document.createElement("div");
            const localTime = formatDateTime(message.createdAt);

            messageDiv.className = `message-wrapper ${message.senderId === currentUserId ? 'sent' : 'received'}`;
            messageDiv.innerHTML = `
                <div class="message">
                    <div class="message-content">${message.content}</div>
                            <div class="message-time">${localTime}</div>
                </div>
            `;

            messagesList.appendChild(messageDiv);
            messagesList.scrollTop = messagesList.scrollHeight;
        }

        async function sendMessage() {
            const messageInput = document.getElementById("messageInput");
            const message = messageInput.value;

            if (message && selectedUserId) {
                await connection.invoke("SendMessage", selectedUserId, message);
                messageInput.value = '';
            }
        }

        async function loadMessages(userId) {
            const response = await fetch(`/Chat/GetMessages?userId=${userId}`);
            const messages = await response.json();

            const messagesList = document.getElementById("messagesList");
            messagesList.innerHTML = '';

            messages.map(msg => {
                appendMessage(msg);
            });
        }

        connection.start();
    </script>
}

<style>
    .users-list {
        height: 600px;
        overflow-y: auto;
    }

    .chat-messages {
        height: 500px;
        overflow-y: auto;
    }

    .message {
        max-width: 70%;
        border-radius: 10px;
        margin: 5px;
    }

    .sent {
        background-color: #007bff;
        color: white;
        margin-left: auto;
    }

    .received {
        background-color: #f8f9fa;
        margin-right: auto;
    }

    .user-item {
        cursor: pointer;
        transition: background-color 0.3s;
    }

        .user-item:hover {
            background-color: #f8f9fa;
        }
</style>
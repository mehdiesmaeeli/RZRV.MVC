<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ include file="T4.FileManager.VisualStudio.ttinclude" #>
<#@ include file="Schema.ttinclude"#>
<#@ output extension=".txt" #>

<#

//DirectoryInfo d = new DirectoryInfo(@"D:\Project\Charisma\tch.eem\Trader\TCH.EEM.Trader.App\Models"); //Assuming Test is your Folder

//var Files = d.GetFiles("*.cs").Select(x=> x.Name.Replace("Model.cs","")); //Getting Text files

var ProjectPath = "RZRV.";
var ProjectDomain = "RZRV";

var connectionString            = @"Data Source=10.20.22.110;Initial Catalog=RZRV.APP;User ID=sa;Password=4R!sm@321";
var schema                      = GetSchema(connectionString);
Func<string, string> justify    = s => LeftJustify (s, 40);


//&& !Files.Contains(so.Name)

var tables                      = schema
    .SchemaObjects
    .Where (so => so.Type == SchemaObject.SchemaObjectType.Table && !so.Name.Contains("_") && !so.Name.Contains("AspNet") && !so.Name.Contains("Chat") && !so.Name.Contains("Order")  )
    .ToArray ()
    ;

var fileManager = new T4FileManager(this);
foreach (var table in tables) {


//+++++++++++++++++++++++++++++++++++ CREATE VIEW Simple

fileManager.StartNewFile( "Create.cshtml",null, "Views/" + table.Name);
#>

@model RZRV.APP.ViewModels.<#= table.Name #>ViewModel

@{
    ViewData["Title"] = "Create <#= table.Name #>";
}

<h1>Create <#= table.Name #></h1>

<h4><#= table.Name #></h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <#
            foreach(var column in table.Columns)
            {
            #>
            <div class="form-group">
                <label asp-for="<#= (column.Name)#>" class="control-label"></label>
                <input asp-for="<#= (column.Name)#>" class="form-control"></select>
                <span asp-validation-for="<#= (column.Name)#>" class="text-danger"></span>
            </div>
            <#
            }
            #>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

<#
fileManager.Process();

fileManager.StartNewFile( "Delete.cshtml",null, "Views/" + table.Name);
#>

@using RZRV.APP.ViewModels
@model <#= table.Name #>ViewModel
@{
    ViewData["Title"] = "Delete <#= table.Name #>";
}

<h1>Delete <#= table.Name #></h1>

<h3>Are you sure you want to delete this <#= table.Name #>?</h3>
<div>
    <h4><#= table.Name #></h4>
    <hr />
    <dl class="row">

            <#
            foreach(var column in table.Columns)
            {
            #>
             <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.<#= column.Name #>)
            </dt>
            <#
            }
            #>
    </dl>
    
    <form asp-action="Delete">
        <input type="hidden" asp-for="Id" />
        <input type="submit" value="Delete" class="btn btn-danger" /> |
        <a asp-action="Index">بازگشت به لیست</a>
    </form>
</div>

<#
fileManager.Process();

fileManager.StartNewFile( "Detail.cshtml",null, "Views/" + table.Name);
#>
@model RZRV.APP.ViewModels.<#= table.Name #>ViewModel

@{
    ViewData["Title"] = "<#= table.Name #> Details";
}

<h1><#= table.Name #> Details</h1>

<div>
    <h4><#= table.Name #></h4>
    <hr />
    <dl class="row">
            <#
            foreach(var column in table.Columns)
            {
            #>
                <dt class="col-sm-2">@Html.DisplayNameFor(model => model.<#= column.Name #>)</dt>
                <dd class="col-sm-10">@Html.DisplayFor(model => model.<#= column.Name #>)</dd>
            <#
            }
            #>
    </dl>
</div>


<div>
    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning">Edit</a>
    <a asp-action="Index" class="btn btn-secondary">بازگشت به لیست</a>
</div>

<#
fileManager.Process();

fileManager.StartNewFile( "Edit.cshtml",null, "Views/" + table.Name);
#>
@model RZRV.APP.ViewModels.<#= table.Name #>ViewModel

@{
    ViewData["Title"] = "Edit <#= table.Name #>";
}

<h1>Edit <#= table.Name #></h1>

<h4><#= table.Name #></h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <#
            foreach(var column in table.Columns)
            {
            #>
               <div class="form-group">
                <label asp-for="<#= column.Name #>" class="control-label"></label>
                <input asp-for="<#= column.Name #>" class="form-control" />
                <span asp-validation-for="<#= column.Name #>" class="text-danger"></span>
            </div>
            <#
            }
            #>
            <div class="form-group">
                <input type="submit" value="ثبت" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

<#
fileManager.Process();

fileManager.StartNewFile( "Index.cshtml",null, "Views/" + table.Name);
#>
@using RZRV.APP.ViewModels
@model IEnumerable<<#= table.Name #>ViewModel>

@{
    ViewData["Title"] = "لیست ";
}

<h1>لیست </h1>

<p>
    <a asp-action="Create" class="btn btn-primary">ایجاد  جدید</a>
</p>
<table class="table">
    <thead>
        <tr>
            <#
            foreach(var column in table.Columns)
            {
            #>
               <th>@Html.DisplayNameFor(model => model.<#= column.Name #>)</th>
            </div>
            <#
            }
            #>
            <th>عملیات</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <#
                foreach(var column in table.Columns)
                {
                #>
                   <td>@Html.DisplayFor(modelItem => item.<#= column.Name #>)</td>
                </div>
                <#
                }
                #>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-warning">ویرایش</a>
                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-info">جزئیات</a>
                    <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-danger">حذف</a>
                </td>
            </tr>
        }
    </tbody>
</table>


<#
fileManager.Process();

//+++++++++++++++++++++++++++++++++++ CREATE VIEW Provider

fileManager.StartNewFile( "Create.cshtml",null, "Areas/Provider/Views/" + table.Name);
#>

@model RZRV.APP.ViewModels.<#= table.Name #>ViewModel

@{
    ViewData["Title"] = "Create <#= table.Name #>";
}

<h1>Create <#= table.Name #></h1>

<h4><#= table.Name #></h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <#
            foreach(var column in table.Columns)
            {
            #>
            <div class="form-group">
                <label asp-for="<#= (column.Name)#>" class="control-label"></label>
                <input asp-for="<#= (column.Name)#>" class="form-control"></select>
                <span asp-validation-for="<#= (column.Name)#>" class="text-danger"></span>
            </div>
            <#
            }
            #>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

<#
fileManager.Process();

fileManager.StartNewFile( "Delete.cshtml",null, "Areas/Provider/Views/" + table.Name);
#>

@using RZRV.APP.ViewModels
@model <#= table.Name #>ViewModel
@{
    ViewData["Title"] = "Delete <#= table.Name #>";
}

<h1>Delete <#= table.Name #></h1>

<h3>Are you sure you want to delete this <#= table.Name #>?</h3>
<div>
    <h4><#= table.Name #></h4>
    <hr />
    <dl class="row">

            <#
            foreach(var column in table.Columns)
            {
            #>
             <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.<#= column.Name #>)
            </dt>
            <#
            }
            #>
    </dl>
    
    <form asp-action="Delete">
        <input type="hidden" asp-for="Id" />
        <input type="submit" value="Delete" class="btn btn-danger" /> |
        <a asp-action="Index">بازگشت به لیست</a>
    </form>
</div>

<#
fileManager.Process();

fileManager.StartNewFile( "Detail.cshtml",null, "Areas/Provider/Views/" + table.Name);
#>
@model RZRV.APP.ViewModels.<#= table.Name #>ViewModel

@{
    ViewData["Title"] = "<#= table.Name #> Details";
}

<h1><#= table.Name #> Details</h1>

<div>
    <h4><#= table.Name #></h4>
    <hr />
    <dl class="row">
            <#
            foreach(var column in table.Columns)
            {
            #>
                <dt class="col-sm-2">@Html.DisplayNameFor(model => model.<#= column.Name #>)</dt>
                <dd class="col-sm-10">@Html.DisplayFor(model => model.<#= column.Name #>)</dd>
            <#
            }
            #>
    </dl>
</div>


<div>
    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning">Edit</a>
    <a asp-action="Index" class="btn btn-secondary">بازگشت به لیست</a>
</div>

<#
fileManager.Process();

fileManager.StartNewFile( "Edit.cshtml",null, "Areas/Provider/Views/" + table.Name);
#>
@model RZRV.APP.ViewModels.<#= table.Name #>ViewModel

@{
    ViewData["Title"] = "Edit <#= table.Name #>";
}

<h1>Edit <#= table.Name #></h1>

<h4><#= table.Name #></h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <#
            foreach(var column in table.Columns)
            {
            #>
               <div class="form-group">
                <label asp-for="<#= column.Name #>" class="control-label"></label>
                <input asp-for="<#= column.Name #>" class="form-control" />
                <span asp-validation-for="<#= column.Name #>" class="text-danger"></span>
            </div>
            <#
            }
            #>
            <div class="form-group">
                <input type="submit" value="ثبت" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

<#
fileManager.Process();

fileManager.StartNewFile( "Index.cshtml",null, "Areas/Provider/Views/" + table.Name);
#>
@using RZRV.APP.ViewModels
@model IEnumerable<<#= table.Name #>ViewModel>

@{
    ViewData["Title"] = "لیست ";
}

<h1>لیست </h1>

<p>
    <a asp-action="Create" class="btn btn-primary">ایجاد  جدید</a>
</p>
<table class="table">
    <thead>
        <tr>
            <#
            foreach(var column in table.Columns)
            {
            #>
               <th>@Html.DisplayNameFor(model => model.<#= column.Name #>)</th>
            </div>
            <#
            }
            #>
            <th>عملیات</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <#
                foreach(var column in table.Columns)
                {
                #>
                   <td>@Html.DisplayFor(modelItem => item.<#= column.Name #>)</td>
                </div>
                <#
                }
                #>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-warning">ویرایش</a>
                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-info">جزئیات</a>
                    <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-danger">حذف</a>
                </td>
            </tr>
        }
    </tbody>
</table>


<#
fileManager.Process();

//+++++++++++++++++++++++++++++++++++ CREATE VIEW Store

fileManager.StartNewFile( "Create.cshtml",null, "Areas/Store/Views/" + table.Name);
#>

@model RZRV.APP.ViewModels.<#= table.Name #>ViewModel

@{
    ViewData["Title"] = "Create <#= table.Name #>";
}

<h1>Create <#= table.Name #></h1>

<h4><#= table.Name #></h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <#
            foreach(var column in table.Columns)
            {
            #>
            <div class="form-group">
                <label asp-for="<#= (column.Name)#>" class="control-label"></label>
                <input asp-for="<#= (column.Name)#>" class="form-control"></select>
                <span asp-validation-for="<#= (column.Name)#>" class="text-danger"></span>
            </div>
            <#
            }
            #>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

<#
fileManager.Process();

fileManager.StartNewFile( "Delete.cshtml",null, "Areas/Store/Views/" + table.Name);
#>

@using RZRV.APP.ViewModels
@model <#= table.Name #>ViewModel
@{
    ViewData["Title"] = "Delete <#= table.Name #>";
}

<h1>Delete <#= table.Name #></h1>

<h3>Are you sure you want to delete this <#= table.Name #>?</h3>
<div>
    <h4><#= table.Name #></h4>
    <hr />
    <dl class="row">

            <#
            foreach(var column in table.Columns)
            {
            #>
             <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.<#= column.Name #>)
            </dt>
            <#
            }
            #>
    </dl>
    
    <form asp-action="Delete">
        <input type="hidden" asp-for="Id" />
        <input type="submit" value="Delete" class="btn btn-danger" /> |
        <a asp-action="Index">بازگشت به لیست</a>
    </form>
</div>

<#
fileManager.Process();

fileManager.StartNewFile( "Detail.cshtml",null, "Areas/Store/Views/" + table.Name);
#>
@model RZRV.APP.ViewModels.<#= table.Name #>ViewModel

@{
    ViewData["Title"] = "<#= table.Name #> Details";
}

<h1><#= table.Name #> Details</h1>

<div>
    <h4><#= table.Name #></h4>
    <hr />
    <dl class="row">
            <#
            foreach(var column in table.Columns)
            {
            #>
                <dt class="col-sm-2">@Html.DisplayNameFor(model => model.<#= column.Name #>)</dt>
                <dd class="col-sm-10">@Html.DisplayFor(model => model.<#= column.Name #>)</dd>
            <#
            }
            #>
    </dl>
</div>


<div>
    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning">Edit</a>
    <a asp-action="Index" class="btn btn-secondary">بازگشت به لیست</a>
</div>

<#
fileManager.Process();

fileManager.StartNewFile( "Edit.cshtml",null, "Areas/Store/Views/" + table.Name);
#>
@model RZRV.APP.ViewModels.<#= table.Name #>ViewModel

@{
    ViewData["Title"] = "Edit <#= table.Name #>";
}

<h1>Edit <#= table.Name #></h1>

<h4><#= table.Name #></h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <#
            foreach(var column in table.Columns)
            {
            #>
               <div class="form-group">
                <label asp-for="<#= column.Name #>" class="control-label"></label>
                <input asp-for="<#= column.Name #>" class="form-control" />
                <span asp-validation-for="<#= column.Name #>" class="text-danger"></span>
            </div>
            <#
            }
            #>
            <div class="form-group">
                <input type="submit" value="ثبت" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

<#
fileManager.Process();

fileManager.StartNewFile( "Index.cshtml",null, "Areas/Store/Views/" + table.Name);
#>
@using RZRV.APP.ViewModels
@model IEnumerable<<#= table.Name #>ViewModel>

@{
    ViewData["Title"] = "لیست ";
}

<h1>لیست </h1>

<p>
    <a asp-action="Create" class="btn btn-primary">ایجاد  جدید</a>
</p>
<table class="table">
    <thead>
        <tr>
            <#
            foreach(var column in table.Columns)
            {
            #>
               <th>@Html.DisplayNameFor(model => model.<#= column.Name #>)</th>
            </div>
            <#
            }
            #>
            <th>عملیات</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <#
                foreach(var column in table.Columns)
                {
                #>
                   <td>@Html.DisplayFor(modelItem => item.<#= column.Name #>)</td>
                </div>
                <#
                }
                #>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-warning">ویرایش</a>
                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-info">جزئیات</a>
                    <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-danger">حذف</a>
                </td>
            </tr>
        }
    </tbody>
</table>


<#
fileManager.Process();

//+++++++++++++++++++++++++++++++++++ CREATE VIEW ADMIN

fileManager.StartNewFile( "Create.cshtml",null, "Areas/Admin/Views/" + table.Name);
#>

@model RZRV.APP.ViewModels.<#= table.Name #>ViewModel

@{
    ViewData["Title"] = "Create <#= table.Name #>";
}

<h1>Create <#= table.Name #></h1>

<h4><#= table.Name #></h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <#
            foreach(var column in table.Columns)
            {
            #>
            <div class="form-group">
                <label asp-for="<#= (column.Name)#>" class="control-label"></label>
                <input asp-for="<#= (column.Name)#>" class="form-control"></select>
                <span asp-validation-for="<#= (column.Name)#>" class="text-danger"></span>
            </div>
            <#
            }
            #>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

<#
fileManager.Process();

fileManager.StartNewFile( "Delete.cshtml",null, "Areas/Admin/Views/" + table.Name);
#>

@using RZRV.APP.ViewModels
@model <#= table.Name #>ViewModel
@{
    ViewData["Title"] = "Delete <#= table.Name #>";
}

<h1>Delete <#= table.Name #></h1>

<h3>Are you sure you want to delete this <#= table.Name #>?</h3>
<div>
    <h4><#= table.Name #></h4>
    <hr />
    <dl class="row">

            <#
            foreach(var column in table.Columns)
            {
            #>
             <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.<#= column.Name #>)
            </dt>
            <#
            }
            #>
    </dl>
    
    <form asp-action="Delete">
        <input type="hidden" asp-for="Id" />
        <input type="submit" value="Delete" class="btn btn-danger" /> |
        <a asp-action="Index">بازگشت به لیست</a>
    </form>
</div>

<#
fileManager.Process();

fileManager.StartNewFile( "Detail.cshtml",null, "Areas/Admin/Views/" + table.Name);
#>
@model RZRV.APP.ViewModels.<#= table.Name #>ViewModel

@{
    ViewData["Title"] = "<#= table.Name #> Details";
}

<h1><#= table.Name #> Details</h1>

<div>
    <h4><#= table.Name #></h4>
    <hr />
    <dl class="row">
            <#
            foreach(var column in table.Columns)
            {
            #>
                <dt class="col-sm-2">@Html.DisplayNameFor(model => model.<#= column.Name #>)</dt>
                <dd class="col-sm-10">@Html.DisplayFor(model => model.<#= column.Name #>)</dd>
            <#
            }
            #>
    </dl>
</div>


<div>
    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning">Edit</a>
    <a asp-action="Index" class="btn btn-secondary">بازگشت به لیست</a>
</div>

<#
fileManager.Process();

fileManager.StartNewFile( "Edit.cshtml",null, "Areas/Admin/Views/" + table.Name);
#>
@model RZRV.APP.ViewModels.<#= table.Name #>ViewModel

@{
    ViewData["Title"] = "Edit <#= table.Name #>";
}

<h1>Edit <#= table.Name #></h1>

<h4><#= table.Name #></h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <#
            foreach(var column in table.Columns)
            {
            #>
               <div class="form-group">
                <label asp-for="<#= column.Name #>" class="control-label"></label>
                <input asp-for="<#= column.Name #>" class="form-control" />
                <span asp-validation-for="<#= column.Name #>" class="text-danger"></span>
            </div>
            <#
            }
            #>
            <div class="form-group">
                <input type="submit" value="ثبت" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

<#
fileManager.Process();

fileManager.StartNewFile( "Index.cshtml",null, "Areas/Admin/Views/" + table.Name);
#>
@using RZRV.APP.ViewModels
@model IEnumerable<<#= table.Name #>ViewModel>

@{
    ViewData["Title"] = "لیست ";
}

<h1>لیست </h1>

<p>
    <a asp-action="Create" class="btn btn-primary">ایجاد  جدید</a>
</p>
<table class="table">
    <thead>
        <tr>
            <#
            foreach(var column in table.Columns)
            {
            #>
               <th>@Html.DisplayNameFor(model => model.<#= column.Name #>)</th>
            </div>
            <#
            }
            #>
            <th>عملیات</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <#
                foreach(var column in table.Columns)
                {
                #>
                   <td>@Html.DisplayFor(modelItem => item.<#= column.Name #>)</td>
                </div>
                <#
                }
                #>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-warning">ویرایش</a>
                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-info">جزئیات</a>
                    <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-danger">حذف</a>
                </td>
            </tr>
        }
    </tbody>
</table>


<#
fileManager.Process();

//+++++++++++++++++++++++++++++++++++ CREATE VIEWModel


fileManager.StartNewFile( table.Name + "ViewModel.cs",null, "ViewModels/" + table.Name);
#>
using System.ComponentModel.DataAnnotations;

namespace RZRV.APP.ViewModels
{
    public class <#= table.Name #>ViewModel
    {
                <#
                foreach(var column in table.Columns)
                {
                #>
                   public <#= (GetModifier(column.ClrType.Name)) #> <#= column.Name #> { get; set; }
                </div>
                <#
                }
                #>
    }

}



<#
fileManager.Process();

//+++++++++++++++++++++++++++++++++++ CREATE SERVICE


fileManager.StartNewFile( table.Name + "Service.cs",null, "Services" );
#>
using Microsoft.EntityFrameworkCore;
using RZRV.APP.Data;
using RZRV.APP.Models;
using RZRV.APP.Services.Interfaces;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace RZRV.APP.Services
{
    public class <#= table.Name #>Service : GenericService<<#= table.Name #>>, I<#= table.Name #>Service
    {
        public <#= table.Name #>Service(ApplicationDbContext context) : base(context)
        {
        }
        // TODO
    }
}
<#
fileManager.Process();

fileManager.StartNewFile( "I" +table.Name + "Service.cs",null, "Services/Interfaces" );
#>
using RZRV.APP.Models;

namespace RZRV.APP.Services.Interfaces
{
    public interface I<#= table.Name #>Service : IGenericService<<#= table.Name #>>
    {
        // todo
    }
}
<#
fileManager.Process();


//+++++++++++++++++++++++++++++++++++ CREATE Controller


fileManager.StartNewFile( table.Name + "Controller.cs",null, "Controllers" );
#>
using Microsoft.AspNetCore.Mvc;
using RZRV.APP.Models;
using RZRV.APP.Services;
using RZRV.APP.Services.Interfaces;
using RZRV.APP.ViewModels;
using System.Linq;
using System.Threading.Tasks;

namespace RZRV.APP.Controllers
{
    public class <#= table.Name #>sController : Controller
    {
        private readonly I<#= table.Name #>Service _<#= table.Name.ToLower() #>Service;

        public <#= table.Name #>sController(I<#= table.Name #>Service <#= table.Name.ToLower() #>Service)
        {
            _<#= table.Name.ToLower() #>Service = <#= table.Name.ToLower() #>Service;
        }

        // GET: 
        public async Task<IActionResult> Index()
        {
            var <#= table.Name.ToLower() #>s = await _<#= table.Name.ToLower() #>Service.GetAllAsync();
            var viewModels = <#= table.Name.ToLower() #>s.Select(o => new <#= table.Name #>ViewModel
            {
                <#
                foreach(var column in table.Columns)
                {
                #>
                   <#= column.Name #> = o.<#= column.Name #>,
                </div>
                <#
                }
                #>
            }).ToList();

            return View(viewModels);
        }

        // GET: /Details/5
        public async Task<IActionResult> Details(int id)
        {
            var <#= table.Name.ToLower() #> = await _<#= table.Name.ToLower() #>Service.GetByIdAsync(id);
            if (<#= table.Name.ToLower() #> == null)
            {
                return NotFound();
            }

            var viewModel = new <#= table.Name.ToLower() #>ViewModel
            {
                <#
                foreach(var column in table.Columns)
                {
                #>
                   <#= column.Name #> = <#= table.Name.ToLower() #>.<#= column.Name #>,
                </div>
                <#
                }
                #>
            };

            return View(viewModel);
        }

        // GET: /Create
        public IActionResult Create()
        {
            return View();
        }

        // POST: /Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(<#= table.Name #>ViewModel viewModel)
        {
            if (ModelState.IsValid)
            {
                var <#= table.Name.ToLower() #> = new <#= table.Name #>
                {
                    <#
                    foreach(var column in table.Columns)
                    {
                    #>
                       <#= column.Name #> = viewModel.<#= column.Name #>,
                    <#
                    }
                    #>
                };

                await _<#= table.Name.ToLower() #>Service.CreateAsync(<#= table.Name #>);
                return RedirectToAction(nameof(Index));
            }
            return View(viewModel);
        }

        // GET: /Edit/5
        public async Task<IActionResult> Edit(int id)
        {
            var model = await _<#= table.Name.ToLower() #>Service.GetByIdAsync(id);
            if (model == null)
            {
                return NotFound();
            }

            var viewModel = new <#= table.Name #>ViewModel
            {
                    <#
                    foreach(var column in table.Columns)
                    {
                    #>
                       <#= column.Name #> = model.<#= column.Name #>,
                    <#
                    }
                    #>
            };

            return View(viewModel);
        }

        // POST: /Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, <#= table.Name #>ViewModel viewModel)
        {
            if (id != viewModel.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                var <#= table.Name.ToLower() #> = new <#= table.Name #>
                {
                    <#
                    foreach(var column in table.Columns)
                    {
                    #>
                       <#= column.Name #> = viewModel.<#= column.Name #>,
                    <#
                    }
                    #>
                };

                await _<#= table.Name.ToLower() #>Service.UpdateAsync(<#= table.Name #>);
                return RedirectToAction(nameof(Index));
            }
            return View(viewModel);
        }

        // GET: /Delete/5
        public async Task<IActionResult> Delete(int id)
        {
            var <#= table.Name.ToLower() #> = await _<#= table.Name.ToLower() #>Service.GetByIdAsync(id);
            if (<#= table.Name.ToLower() #> == null)
            {
                return NotFound();
            }

            var viewModel = new <#= table.Name.ToLower() #>ViewModel();

            return View(viewModel);
        }

        // POST: /Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            await _orderService.DeleteAsync(id);
            return RedirectToAction(nameof(Index));
        }
    }
}
<#
fileManager.Process();
//+++++++++++++++++++++++++++++++++++ CREATE Controller ADMIN


fileManager.StartNewFile( table.Name + "Controller.cs",null, "Areas/Admin/Controllers" );
#>
using Microsoft.AspNetCore.Mvc;
using RZRV.APP.Models;
using RZRV.APP.Services;
using RZRV.APP.Services.Interfaces;
using RZRV.APP.ViewModels;
using System.Linq;
using System.Threading.Tasks;

namespace RZRV.APP.Areas.Admin.Controllers
{
    public class <#= table.Name #>sController : AdminBaseController
    {
        private readonly I<#= table.Name #>Service _<#= table.Name.ToLower() #>Service;

        public <#= table.Name #>sController(I<#= table.Name #>Service <#= table.Name.ToLower() #>Service)
        {
            _<#= table.Name.ToLower() #>Service = <#= table.Name.ToLower() #>Service;
        }

        // GET: 
        public async Task<IActionResult> Index()
        {
            var <#= table.Name.ToLower() #>s = await _<#= table.Name.ToLower() #>Service.GetAllAsync();
            var viewModels = <#= table.Name.ToLower() #>s.Select(o => new <#= table.Name #>ViewModel
            {
                <#
                foreach(var column in table.Columns)
                {
                #>
                   <#= column.Name #> = o.<#= column.Name #>,
                </div>
                <#
                }
                #>
            }).ToList();

            return View(viewModels);
        }

        // GET: /Details/5
        public async Task<IActionResult> Details(int id)
        {
            var <#= table.Name.ToLower() #> = await _<#= table.Name.ToLower() #>Service.GetByIdAsync(id);
            if (<#= table.Name.ToLower() #> == null)
            {
                return NotFound();
            }

            var viewModel = new <#= table.Name.ToLower() #>ViewModel
            {
                <#
                foreach(var column in table.Columns)
                {
                #>
                   <#= column.Name #> = <#= table.Name.ToLower() #>.<#= column.Name #>,
                </div>
                <#
                }
                #>
            };

            return View(viewModel);
        }

        // GET: /Create
        public IActionResult Create()
        {
            return View();
        }

        // POST: /Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(<#= table.Name #>ViewModel viewModel)
        {
            if (ModelState.IsValid)
            {
                var <#= table.Name.ToLower() #> = new <#= table.Name #>
                {
                    <#
                    foreach(var column in table.Columns)
                    {
                    #>
                       <#= column.Name #> = viewModel.<#= column.Name #>,
                    <#
                    }
                    #>
                };

                await _<#= table.Name.ToLower() #>Service.CreateAsync(<#= table.Name #>);
                return RedirectToAction(nameof(Index));
            }
            return View(viewModel);
        }

        // GET: /Edit/5
        public async Task<IActionResult> Edit(int id)
        {
            var model = await _<#= table.Name.ToLower() #>Service.GetByIdAsync(id);
            if (model == null)
            {
                return NotFound();
            }

            var viewModel = new <#= table.Name #>ViewModel
            {
                    <#
                    foreach(var column in table.Columns)
                    {
                    #>
                       <#= column.Name #> = model.<#= column.Name #>,
                    <#
                    }
                    #>
            };

            return View(viewModel);
        }

        // POST: /Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, <#= table.Name #>ViewModel viewModel)
        {
            if (id != viewModel.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                var <#= table.Name.ToLower() #> = new <#= table.Name #>
                {
                    <#
                    foreach(var column in table.Columns)
                    {
                    #>
                       <#= column.Name #> = viewModel.<#= column.Name #>,
                    <#
                    }
                    #>
                };

                await _<#= table.Name.ToLower() #>Service.UpdateAsync(<#= table.Name #>);
                return RedirectToAction(nameof(Index));
            }
            return View(viewModel);
        }

        // GET: /Delete/5
        public async Task<IActionResult> Delete(int id)
        {
            var <#= table.Name.ToLower() #> = await _<#= table.Name.ToLower() #>Service.GetByIdAsync(id);
            if (<#= table.Name.ToLower() #> == null)
            {
                return NotFound();
            }

            var viewModel = new <#= table.Name.ToLower() #>ViewModel();

            return View(viewModel);
        }

        // POST: /Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            await _orderService.DeleteAsync(id);
            return RedirectToAction(nameof(Index));
        }
    }
}
<#
fileManager.Process();
//+++++++++++++++++++++++++++++++++++ CREATE Controller Provider


fileManager.StartNewFile( table.Name + "Controller.cs",null, "Areas/Provider/Controllers" );
#>
using Microsoft.AspNetCore.Mvc;
using RZRV.APP.Models;
using RZRV.APP.Services;
using RZRV.APP.Services.Interfaces;
using RZRV.APP.ViewModels;
using System.Linq;
using System.Threading.Tasks;

namespace RZRV.APP.Areas.Provider.Controllers
{
    public class <#= table.Name #>sController : ProviderBaseController
    {
        private readonly I<#= table.Name #>Service _<#= table.Name.ToLower() #>Service;

        public <#= table.Name #>sController(I<#= table.Name #>Service <#= table.Name.ToLower() #>Service)
        {
            _<#= table.Name.ToLower() #>Service = <#= table.Name.ToLower() #>Service;
        }

        // GET: 
        public async Task<IActionResult> Index()
        {
            var <#= table.Name.ToLower() #>s = await _<#= table.Name.ToLower() #>Service.GetAllAsync();
            var viewModels = <#= table.Name.ToLower() #>s.Select(o => new <#= table.Name #>ViewModel
            {
                <#
                foreach(var column in table.Columns)
                {
                #>
                   <#= column.Name #> = o.<#= column.Name #>,
                </div>
                <#
                }
                #>
            }).ToList();

            return View(viewModels);
        }

        // GET: /Details/5
        public async Task<IActionResult> Details(int id)
        {
            var <#= table.Name.ToLower() #> = await _<#= table.Name.ToLower() #>Service.GetByIdAsync(id);
            if (<#= table.Name.ToLower() #> == null)
            {
                return NotFound();
            }

            var viewModel = new <#= table.Name.ToLower() #>ViewModel
            {
                <#
                foreach(var column in table.Columns)
                {
                #>
                   <#= column.Name #> = <#= table.Name.ToLower() #>.<#= column.Name #>,
                </div>
                <#
                }
                #>
            };

            return View(viewModel);
        }

        // GET: /Create
        public IActionResult Create()
        {
            return View();
        }

        // POST: /Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(<#= table.Name #>ViewModel viewModel)
        {
            if (ModelState.IsValid)
            {
                var <#= table.Name.ToLower() #> = new <#= table.Name #>
                {
                    <#
                    foreach(var column in table.Columns)
                    {
                    #>
                       <#= column.Name #> = viewModel.<#= column.Name #>,
                    <#
                    }
                    #>
                };

                await _<#= table.Name.ToLower() #>Service.CreateAsync(<#= table.Name #>);
                return RedirectToAction(nameof(Index));
            }
            return View(viewModel);
        }

        // GET: /Edit/5
        public async Task<IActionResult> Edit(int id)
        {
            var model = await _<#= table.Name.ToLower() #>Service.GetByIdAsync(id);
            if (model == null)
            {
                return NotFound();
            }

            var viewModel = new <#= table.Name #>ViewModel
            {
                    <#
                    foreach(var column in table.Columns)
                    {
                    #>
                       <#= column.Name #> = model.<#= column.Name #>,
                    <#
                    }
                    #>
            };

            return View(viewModel);
        }

        // POST: /Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, <#= table.Name #>ViewModel viewModel)
        {
            if (id != viewModel.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                var <#= table.Name.ToLower() #> = new <#= table.Name #>
                {
                    <#
                    foreach(var column in table.Columns)
                    {
                    #>
                       <#= column.Name #> = viewModel.<#= column.Name #>,
                    <#
                    }
                    #>
                };

                await _<#= table.Name.ToLower() #>Service.UpdateAsync(<#= table.Name #>);
                return RedirectToAction(nameof(Index));
            }
            return View(viewModel);
        }

        // GET: /Delete/5
        public async Task<IActionResult> Delete(int id)
        {
            var <#= table.Name.ToLower() #> = await _<#= table.Name.ToLower() #>Service.GetByIdAsync(id);
            if (<#= table.Name.ToLower() #> == null)
            {
                return NotFound();
            }

            var viewModel = new <#= table.Name.ToLower() #>ViewModel();

            return View(viewModel);
        }

        // POST: /Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            await _orderService.DeleteAsync(id);
            return RedirectToAction(nameof(Index));
        }
    }
}
<#
fileManager.Process();
//+++++++++++++++++++++++++++++++++++ CREATE Controller STORE


fileManager.StartNewFile( table.Name + "Controller.cs",null, "Areas/Store/Controllers" );
#>
using Microsoft.AspNetCore.Mvc;
using RZRV.APP.Models;
using RZRV.APP.Services;
using RZRV.APP.Services.Interfaces;
using RZRV.APP.ViewModels;
using System.Linq;
using System.Threading.Tasks;

namespace RZRV.APP.Areas.Store.Controllers
{
    public class <#= table.Name #>sController : StoreBaseController
    {
        private readonly I<#= table.Name #>Service _<#= table.Name.ToLower() #>Service;

        public <#= table.Name #>sController(I<#= table.Name #>Service <#= table.Name.ToLower() #>Service)
        {
            _<#= table.Name.ToLower() #>Service = <#= table.Name.ToLower() #>Service;
        }

        // GET: 
        public async Task<IActionResult> Index()
        {
            var <#= table.Name.ToLower() #>s = await _<#= table.Name.ToLower() #>Service.GetAllAsync();
            var viewModels = <#= table.Name.ToLower() #>s.Select(o => new <#= table.Name #>ViewModel
            {
                <#
                foreach(var column in table.Columns)
                {
                #>
                   <#= column.Name #> = o.<#= column.Name #>,
                </div>
                <#
                }
                #>
            }).ToList();

            return View(viewModels);
        }

        // GET: /Details/5
        public async Task<IActionResult> Details(int id)
        {
            var <#= table.Name.ToLower() #> = await _<#= table.Name.ToLower() #>Service.GetByIdAsync(id);
            if (<#= table.Name.ToLower() #> == null)
            {
                return NotFound();
            }

            var viewModel = new <#= table.Name.ToLower() #>ViewModel
            {
                <#
                foreach(var column in table.Columns)
                {
                #>
                   <#= column.Name #> = <#= table.Name.ToLower() #>.<#= column.Name #>,
                </div>
                <#
                }
                #>
            };

            return View(viewModel);
        }

        // GET: /Create
        public IActionResult Create()
        {
            return View();
        }

        // POST: /Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(<#= table.Name #>ViewModel viewModel)
        {
            if (ModelState.IsValid)
            {
                var <#= table.Name.ToLower() #> = new <#= table.Name #>
                {
                    <#
                    foreach(var column in table.Columns)
                    {
                    #>
                       <#= column.Name #> = viewModel.<#= column.Name #>,
                    <#
                    }
                    #>
                };

                await _<#= table.Name.ToLower() #>Service.CreateAsync(<#= table.Name #>);
                return RedirectToAction(nameof(Index));
            }
            return View(viewModel);
        }

        // GET: /Edit/5
        public async Task<IActionResult> Edit(int id)
        {
            var model = await _<#= table.Name.ToLower() #>Service.GetByIdAsync(id);
            if (model == null)
            {
                return NotFound();
            }

            var viewModel = new <#= table.Name #>ViewModel
            {
                    <#
                    foreach(var column in table.Columns)
                    {
                    #>
                       <#= column.Name #> = model.<#= column.Name #>,
                    <#
                    }
                    #>
            };

            return View(viewModel);
        }

        // POST: /Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, <#= table.Name #>ViewModel viewModel)
        {
            if (id != viewModel.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                var <#= table.Name.ToLower() #> = new <#= table.Name #>
                {
                    <#
                    foreach(var column in table.Columns)
                    {
                    #>
                       <#= column.Name #> = viewModel.<#= column.Name #>,
                    <#
                    }
                    #>
                };

                await _<#= table.Name.ToLower() #>Service.UpdateAsync(<#= table.Name #>);
                return RedirectToAction(nameof(Index));
            }
            return View(viewModel);
        }

        // GET: /Delete/5
        public async Task<IActionResult> Delete(int id)
        {
            var <#= table.Name.ToLower() #> = await _<#= table.Name.ToLower() #>Service.GetByIdAsync(id);
            if (<#= table.Name.ToLower() #> == null)
            {
                return NotFound();
            }

            var viewModel = new <#= table.Name.ToLower() #>ViewModel();

            return View(viewModel);
        }

        // POST: /Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            await _orderService.DeleteAsync(id);
            return RedirectToAction(nameof(Index));
        }
    }
}
<#
fileManager.Process();


//END OF FOREACH
}
#>


<#+
static Schema GetSchema (string connectionString) 
    {
        using (var connection = new SqlConnection (connectionString))
        {
            connection.Open ();

            return new Schema (connection);
        }
    }
static string GetModifier(string param)
{
    switch (param){
    case "String" : return "string";
    case "Boolean" : return "bool";
    case "Byte" : return "byte";
    case "Int32"  : return "int";
    case "Int64"  : return  "long";
    case "Int16"  : return "short";
    }
    return param;
}
#>

<#@ assembly name="System.Core" #>
<#@ assembly name="System.Reflection" #>
<#@ assembly name="System.Linq" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Threading.Tasks" #>
<#@ import namespace="System.Collections.Generic" #>

<#+
   public partial class T4FileManager
    {
        /// <summary>
        /// The interface for the host that transforms text template.
        /// </summary>
        private readonly ITextTemplatingEngineHost host;

        /// <summary>
        /// Object for Visual Studio core automation.
        /// </summary>
        private readonly DTE dte;

        /// <summary>
        /// Object for logging.
        /// </summary>
        private readonly Logger logger;

        /// <summary>
        /// Code to generate as <see cref="StringBuilder"/>.
        /// </summary>
        private readonly StringBuilder textTransformation;

        /// <summary>
        /// Files to be generated.
        /// </summary>
        private readonly List<FileToGenerate> filesToGenerate;

        /// <summary>
        /// Information about the generated files.
        /// </summary>
        private readonly GeneratedInfo generatedInfo;

        /// <summary>
        /// Uniform header block for generating the files.
        /// </summary>
        private string headerBlock;

        /// <summary>
        /// Information about the current file to be generated.
        /// </summary>
        private FileToGenerate currentFileToGenerate;

        /// <summary>
        /// Switch to write log of generation to main output file.
        /// </summary>
        private bool isLogToMainOutputFileEnabled = false;

        /// <summary>
        /// Allow overwriting of files if it has already been generated.
        /// </summary>
        /// <value>Default value is true.</value>
        public bool CanOverwriteExistingFile = true;

        /// <summary>
        /// Automatic indentation of the code.
        /// </summary>
        /// <value>Default value is false.</value>
        public bool IsAutoIndentEnabled = false;

        /// <summary>
        /// Enable Placeholder-Content for main output file to avoiding generation of empty .cs file 
        /// and ignoring of the output extension directive in .net core projects.
        /// </summary>
        public bool IsNetCorePlaceholderContentEnabled = true;

        /// <summary>
        /// Automatic indentation of the code with ReSharper.
        /// </summary>
        public bool IsAutoCleanUpWithResharperEnabled = false;

        /// <summary>
	    /// Defines Encoding format for generated output file. (Default UTF8)
	    /// </summary>
	    /// <returns></returns>
	    public System.Text.Encoding Encoding = System.Text.Encoding.UTF8;

        /// <summary>
        /// Constructor for the instantiation of the FileManager.
        /// </summary>
        /// <param name="textTransformation">Code to generate as <see cref="GeneratedTextTransformation"/>.</param>
        public T4FileManager(GeneratedTextTransformation textTransformation)
        : this(textTransformation.GenerationEnvironment, textTransformation.Host) {}

        /// <summary>
        /// Constructor for the instantiation of the FileManager.
        /// </summary>
        /// <param name="textTransformation">Code to generate as <see cref="StringBuilder"/>.</param>
        /// <param name="host">The interface for the host that transforms text template.</param>
        public T4FileManager(StringBuilder textTransformation, ITextTemplatingEngineHost host)
        {
            this.textTransformation = textTransformation;
            this.host = host;

            // prevent "error generating output" in ide, if output extension not set
            this.host.SetFileExtension(".txt");

            this.filesToGenerate = new List<FileToGenerate>();
            this.generatedInfo = new GeneratedInfo();
            this.dte = GetHostServiceProvider();
            this.logger = new Logger(this.dte, Path.GetFileName(this.host.TemplateFile));
        }

        /// <summary>
        /// Create instance of the FileManager.
        /// </summary>
        /// <param name="textTransformation">Code to generate as <see cref="GeneratedTextTransformation"/>.</param>
        public static T4FileManager Create(GeneratedTextTransformation textTransformation)
        {
            return new T4FileManager(textTransformation.GenerationEnvironment, textTransformation.Host);
        }

        /// <Summary>
        /// Workaround: set invalid file extension to prevent generation of template main output file (Suggessted by Eagle3386)
        /// Produces the warning A custom tool 'TextTemplatingFileGenerator' is associated with file '*.tt', but the output of the 
        /// custom tool was not found in the project.
        /// </Summary>
        public T4FileManager DisableTemplateMainOutputFile()
        {
            this.logger.Information("TemplateMainOutputFile disabled");
            this.host.SetFileExtension("/");
            return this;
        }

        /// <Summary>
        /// Change switch CanOverwriteExistingFile to false
        /// </Summary>
        public T4FileManager DisableOverwriteExistingFile()
        {
            this.logger.Information("CanOverwriteExistingFile is disabled (false)");
            this.CanOverwriteExistingFile = false;
            return this;
        }

        public T4FileManager SetOutputFileEncoding(System.Text.Encoding encoding)
        {
            this.logger.Information("Encoding is set to " + encoding.HeaderName);
            this.Encoding = encoding;
            return this;
        }

        /// <Summary>
        /// Change switch IsAutoCleanUpWithResharperEnabled to true
        /// </Summary>
        public T4FileManager EnableCleanUpWithResharper()
        {
            this.logger.Information("IsAutoCleanUpWithResharperEnabled is enabled (true)");
            this.IsAutoCleanUpWithResharperEnabled = true;
            return this;
        }

        /// <Summary>
        /// Change switch IsAutoIndentEnabled to true
        /// </Summary>
        public T4FileManager EnableAutoIndent()
        {
            this.logger.Information("IsAutoIndentEnabled is enabled (true) / VS Format Document Shortcut");
            this.IsAutoIndentEnabled = true;
            return this;
        }

        /// <Summary>
        /// Write log information to the main output file in addtion to the active visual studio output window.
        /// </Summary>
        public T4FileManager EnableLog()
        {
            this.logger.Information("Log to main output file enabled");
            this.isLogToMainOutputFileEnabled = true;
            return this;
        }

        /// <summary>
        /// Clear current code input for starting header block.
        /// </summary>
        public void StartHeader()
        {
            this.logger.Information("Header started");
            this.textTransformation.Clear();
        }

        /// <summary>
        /// Set code as header block and empty code input.
        /// </summary>
        public void FinishHeader()
        {
            this.logger.Information("FinishHeader, {0} chars removed from main output", this.textTransformation.Length); 
            this.headerBlock = this.textTransformation.ToString();
            this.textTransformation.Remove(0, this.textTransformation.Length);
        }

        /// <summary>
        /// Alternative method to finish header block.
        /// </summary>
        public void EndBlock()
        {
            FinishHeader();
        }

        /// <summary>
        /// Empty header block.
        /// </summary>
        public void ClearHeader()
        {
            this.logger.Information("ClearHeader called"); 
            this.headerBlock = null;
        }

        public void Log(string info)
        {
            this.logger.Information(info);
        }

        public void Log(string info, params object[] param)
        {
            this.logger.Information(info, param);
        }

        /// <summary>
        /// A new file will be started. The generated code that was before this method is added to the last file.
        /// </summary>
        /// <param name="filename">The file name for the generated file.</param>
        /// <param name="project">Project name where the file is generated.</param>
        /// <param name="path">Subfolder within the project where the file is generated.</param>
        public void StartNewFile(string filename, string project, string path)
        {
            StartNewFile(filename, project, path, null);
        }


        /// <summary>
        /// A new file will be started. The generated code that was before this method is added to the last file.
        /// </summary>
        /// <param name="filename">The file name for the generated file.</param>
        /// <param name="project">Project name where the file is generated.</param>
        /// <param name="path">Subfolder within the project where the file is generated.</param>
        /// <param name="properties">Settings that can be defined for the generated file.</param>
        public void StartNewFile(string filename, string project, string path, FileProperties properties)
        {
            CreateNewFile(filename, project, path, properties);
        }

        /// <summary>
        /// A new file will be started. The generated code that was before this method is added to the last file.
        /// </summary>
        /// <param name="filename">The file name for the generated file.</param>
        /// <param name="project">Project name where the file is generated.</param>
        /// <param name="path">Subfolder within the project where the file is generated.</param>
        public void CreateNewFile(string filename, string project, string path)
        {
            CreateNewFile(filename, project, path, null);
        }

        /// <summary>
        ///  A new file will be started. The generated code that was before this method is added to the last file.
        /// </summary>
        /// <param name="filename">The file name for the generated file.</param>
        /// <param name="project">Project name where the file is generated.</param>
        /// <param name="path">Subfolder within the project where the file is generated.</param>
        /// <param name="properties">Settings that can be defined for the generated file.</param>
        public void CreateNewFile(string filename, string project, string path, FileProperties properties)
        {
            this.logger.Information("Begin CreateNewFile {0}", filename);
            if (this.currentFileToGenerate != null && !string.IsNullOrEmpty(this.currentFileToGenerate.Filename))
            {
                this.logger.Information("Finish previous file");
                FinishFile();
            }

            var formattedPath = path == null ? null : path.Replace("/", @"\");
            this.logger.Information("Formatted path set {0}", formattedPath);

            properties = properties ?? new FileProperties();

            this.currentFileToGenerate = new FileToGenerate
            {
                Filename = filename,
                Path = formattedPath,
                Properties = properties.ToDictionary(),
                Project = project
            };

            this.textTransformation.Clear();
            this.logger.Information("End CreateNewFile {0}", filename);
        }

        /// <summary>
        /// The generated file is finished.
        /// </summary>
        public void FinishFile()
        {
            this.logger.Information("Begin FinishFile");
            string directory = null;

            if (!string.IsNullOrEmpty(this.currentFileToGenerate.Project))
            {
                directory = this.GetProjectDirectoryPath(this.currentFileToGenerate.Project);
                this.logger.Information("Filepath {0} to project {1} for file {2}", directory, this.currentFileToGenerate.Project, this.currentFileToGenerate.Filename);
            }

            directory = directory ?? this.GetTemplateFileProjectDirectoryPath();

            if (!string.IsNullOrEmpty(this.currentFileToGenerate.Path))
            {
                directory = Path.Combine(directory, this.currentFileToGenerate.Path);
                this.logger.Information("Filepath {0} to solution dir {1} for file {2}", directory, this.currentFileToGenerate.Project, this.currentFileToGenerate.Filename);
            }

            this.currentFileToGenerate.AbsolutePath = directory;

            var header = this.headerBlock;
            if (string.IsNullOrEmpty(header) == false)
            {
                header = this.headerBlock.Replace("$filename$", this.currentFileToGenerate.Filename);
            }

            this.currentFileToGenerate.Content = this.textTransformation.Insert(0, header).ToString();
            this.filesToGenerate.Add(this.currentFileToGenerate);
            this.logger.Information("File {0} added to list", this.currentFileToGenerate.Filename);

            this.logger.Information("File content ({0} chars) removed from main text transformation", this.textTransformation.Length);
            this.textTransformation.Remove(0, this.textTransformation.Length);

            this.currentFileToGenerate = new FileToGenerate();
            this.logger.Information("End FinishFile");
        }

        /// <summary>
        /// <see cref="Generate"/>
        /// </summary>
        public void Process()
        {
            this.Generate();
        }

        /// <summary>
        /// Files are generated. Old files are cleaned up. Info file is created.
        /// </summary>
        public void Generate()
        {
            var stopWatch = new Stopwatch();
	        stopWatch.Start();

            this.logger.Information("Start Generate");
            if (this.currentFileToGenerate != null && !string.IsNullOrEmpty(this.currentFileToGenerate.Filename))
            {
                this.logger.Information("Finish last file");
                FinishFile();
            }

            var templateFile = this.host.TemplateFile.Replace(".tt", ".info.json");
            GeneratedInfo filesInfoFromPreviousRun = null;

            if (File.Exists(templateFile))
            {
                var content = File.ReadAllText(templateFile);
                filesInfoFromPreviousRun = TemplateInfoSerializer.Deserialize(content);
                this.logger.Information("Infos loaded from last run {0}", Path.GetFileName(templateFile));
            }

            this.textTransformation.Clear();

            foreach (var fileToGenerate in this.filesToGenerate)
            {
                this.GenerateNewFile(fileToGenerate);
                this.GenerateNewFileForSolution(fileToGenerate);
            }

            this.logger.Information("{0} files generated", this.filesToGenerate.Count);
            this.DeleteExistingFiles(filesInfoFromPreviousRun);

            this.generatedInfo.FilesToGenerate = this.filesToGenerate;

            File.WriteAllText(templateFile, TemplateInfoSerializer.Serialize(this.generatedInfo));
            this.logger.Information("New info file {0} created", Path.GetFileName(templateFile));
            this.logger.Information("End Generate");
            
            stopWatch.Stop();
            this.logger.Information("Duration: {0:h\\:mm\\:ss\\.fffff}", stopWatch.Elapsed);

            if (this.isLogToMainOutputFileEnabled)
            {
                this.textTransformation.Append(this.logger.Log);
            }
			
            if (this.IsNetCorePlaceholderContentEnabled)
            {
                this.textTransformation.Append(".NET Core placeholder content to avoid ignoring the output extension directive");
            }
        }

        /// <summary>
        /// Physical generation of the file.
        /// </summary>
        /// <param name="fileToGenerate">File information.</param>
        private void GenerateNewFile(FileToGenerate fileToGenerate)
        {
            Directory.CreateDirectory(fileToGenerate.AbsolutePath);

            var filePath = Path.Combine(fileToGenerate.AbsolutePath, fileToGenerate.Filename);

            if (IsAutoIndentEnabled || IsAutoCleanUpWithResharperEnabled)
            {
                fileToGenerate.Content = fileToGenerate.Content.Insert(0, " ");
            }

            var canOverwriteExistingFile = CanOverwriteExistingFileByFile(fileToGenerate);

            if ((canOverwriteExistingFile && this.CanOverwriteExistingFile) || !File.Exists(filePath))
            {
                File.WriteAllText(Path.Combine(fileToGenerate.AbsolutePath, fileToGenerate.Filename), fileToGenerate.Content, this.Encoding);
            }
        }

        /// <summary>
        /// Check whether a file may be overwritten.
        /// </summary>
        /// <param name="fileToGenerate">File information.</param>
        /// <returns>Overwriting allowed or not as <see cref="bool"/>.</returns>
        private bool CanOverwriteExistingFileByFile(FileToGenerate fileToGenerate)
        {
            if (fileToGenerate.Properties.ContainsKey(Property.CanOverwriteExistingFile))
            {
                var value = fileToGenerate.Properties[Property.CanOverwriteExistingFile] as bool?;
                if (value == false)
                {
                    this.logger.Information("Can't overwrite file " + fileToGenerate.Filename);
                    return false;
                }
            }

            this.logger.Information("File {0} will be overwritten", fileToGenerate.Filename);
            return true;
        }

        /// <summary>
        /// Add file to the solution and execute the shortcuts (example: Resharper Clean Up).
        /// </summary>
        /// <param name="fileToGenerate">File information.</param>
        private void GenerateNewFileForSolution(FileToGenerate fileToGenerate)
        {
            this.logger.Information("Begin GenerateNewFileForSolution");
            var exists = this.HasProjectItem(fileToGenerate.AbsolutePath, fileToGenerate.Filename);

            this.AddMissingFileToProject(fileToGenerate.Project, fileToGenerate.AbsolutePath, fileToGenerate.Filename);

            var fileProjectItem = this.FindProjectItem(fileToGenerate.Project, fileToGenerate.Filename);

            var canOverwriteExistingFile = CanOverwriteExistingFileByFile(fileToGenerate);

            if (fileToGenerate.Properties != null && (canOverwriteExistingFile && this.CanOverwriteExistingFile) || !exists)
            {
                if (fileToGenerate.Properties != null)
                {
                    foreach (var property in fileToGenerate.Properties)
                    {
                        if (property.Key == Property.CanOverwriteExistingFile)
                        {
                            continue;
                        }

                        this.logger.Information("Set property key/value pair {0}/{1}", property.Key, property.Value);
                        this.SetPropertyValue(fileProjectItem, property.Key, property.Value);
                    }
                }

                if (IsAutoIndentEnabled)
                {
                    this.logger.Information("AutoIndent is enabled for file");
                    this.FormatProjectItem(fileProjectItem);
                }

                if (IsAutoCleanUpWithResharperEnabled)
                {
                    this.logger.Information("AutoCleanup with resharper is enabled for file");
                    this.FormatProjectItemWithResharper(fileProjectItem);
                }
            }

            this.logger.Information("End GenerateNewFileForSolution");
        }

        /// <summary>
        /// Clean up the old files.
        /// </summary>
        private void DeleteExistingFiles(GeneratedInfo filesInfoFromPreviousRun)
        {
            this.logger.Information("Start DeleteExistingFiles");

            if (filesInfoFromPreviousRun == null || filesInfoFromPreviousRun.HasContent() == false || this.CanOverwriteExistingFile == false)
            {
                this.logger.Information("Cancel DeleteExistingFiles (no files from previous run and CanOverwriteExistingFile: {0}", this.CanOverwriteExistingFile);
                return;
            }

            foreach (var file in filesInfoFromPreviousRun.FilesToGenerate)
            {
                string directory = null;

                if (!string.IsNullOrEmpty(file.Project))
                {
                    directory = this.GetProjectDirectoryPath(file.Project);
                }

                directory = directory ?? this.GetTemplateFileProjectDirectoryPath();

                if (!string.IsNullOrEmpty(file.Path))
                {
                    directory = Path.Combine(directory, file.Path);
                }

                var filePath = Path.Combine(directory, file.Filename);

                if (!this.filesToGenerate.Any(x => x.Project == file.Project
                                                    && x.Filename == file.Filename
                                                    && x.Path == file.Path
                                                    && CanOverwriteExistingFileByFile(x)))
                {
                    File.Delete(filePath);
                    this.RemoveFileFromProject(directory, file.Filename);
                    this.logger.Information("Dirty file {0} removed", filePath);
                }
            }

            this.logger.Information("End DeleteExistingFiles");
        }

        /// <summary>
        /// Execute Resharper cleanup task.
        /// </summary>
        /// <param name="item"><see cref="ProjectItem"/>.</param>
        private void FormatProjectItemWithResharper(ProjectItem item)
        {
            this.ExecuteVsCommand(item, "ReSharper.ReSharper_SilentCleanupCode");
        }

        /// <summary>
        /// Execute Visual Studio Format Document task.
        /// </summary>
        /// <param name="item"><see cref="ProjectItem"/>.</param>
        private void FormatProjectItem(ProjectItem item)
        {
            this.ExecuteVsCommand(item, "Edit.FormatDocument");
        }

        /// <summary>
        /// Execute Visual Studio commands.
        /// </summary>
        /// <param name="item"><see cref="ProjectItem"/>.</param>
        /// <param name="command">Commands as <see cref="string"/>.</param>
        private void ExecuteVsCommand(ProjectItem item, params string[] command)
        {
            if (item == null)
            {
                throw new ArgumentNullException("item");
            }

            if (item.IsOpen)
            {
                item.Document.Close(vsSaveChanges.vsSaveChangesNo);
            }

            item.Open();

            foreach (var cmd in command)
            {
                if (string.IsNullOrWhiteSpace(cmd) == true)
                {
                    continue;
                }

                TryToExecuteCommand(item, cmd, false, 1);
            }

            item.Document.Close(vsSaveChanges.vsSaveChangesYes);
            this.logger.Information("VS command {0} executed", command);
        }

        /// <summary>
        /// Recursive try to execute Visual Studio commands.
        /// </summary>
        /// <param name="item"><see cref="ProjectItem"/>.</param>
        /// <param name="command">Command as <see cref="string"/>.</param>
        /// <param name="finished">Evaluate whether command was executed.</param>
        /// <param name="attempt">Number of attempts.</param>
        private void TryToExecuteCommand(ProjectItem item, string command, bool finished, int attempt)
        {
            System.Threading.Thread.Sleep(250);
            this.logger.Information("TryToExecuteCommand {0}, attempt: {1}", command, attempt);

            if (finished)
            {
                return;
            }

            try
            {
                item.Document.ActiveWindow.SetFocus();
                this.dte.ExecuteCommand(command, String.Empty);
                finished = true;
            }
            catch (Exception exception)
            {
                if (exception.Message.Contains("Command") && exception.Message.Contains("is not valid"))
                {
                    return;
                }

                finished = false;
            }

            if (item.Document.Saved == true)
            {
                finished = false;
            }

            if (attempt == 25)
            {
                this.logger.Information("TryToExecuteCommand {0} failed");
                return;
            }

            attempt++;

            TryToExecuteCommand(item, command, finished, attempt);
        }


        /// <summary>
        /// Find the project item in the solution.
        /// </summary>
        /// <param name="projectName">Project name without extension.</param>
        /// <param name="filename">Filename with extension.</param>
        /// <returns></returns>
        private ProjectItem FindProjectItem(string projectName, string fileName)
        {
            if (string.IsNullOrEmpty(projectName))
            {
                return dte.Solution.FindProjectItem(fileName);
            }
            else 
            {
                var project = FindProjectByName(projectName);
                var item = GetAllProjectItemsRecursive(project.ProjectItems)
                    .FirstOrDefault(p => p.Name.Contains(fileName));
                return item;
            }
        }

        /// <summary>
        /// Find all project items within a project.
        /// </summary>
        /// <param name="projectItems"><see cref="ProjectItems"/>The ProjectItems of the project.</param>
        /// <returns><see cref="IEnumerable{ProjectItem}"/>The ProjectItem if found.</returns>
        private IEnumerable<ProjectItem> GetAllProjectItemsRecursive(ProjectItems projectItems)
        {
            foreach (ProjectItem projectItem in projectItems)
            {
                foreach (var subItem in GetAllProjectItemsRecursive(projectItem.ProjectItems))
                {
                    yield return subItem;
                }

                yield return projectItem;
            }
        }

        /// <summary>
        /// Make sure that the project item is searched everywhere and that it is a project.
        /// </summary>
        /// <param name="projectName">Project name without extension.</param>
        /// <returns><see cref="Project"/>.</returns>
        private Project FindProjectByName(string projectName)
        {
            Project foundProject = null;

            var list = new List<Project>();
            list.AddRange(this.dte.Solution.Projects.Cast<Project>());

            for (int i = 0; i < list.Count; i++)
            {
                if (list[i].ProjectItems != null)
                {
                    list.AddRange(list[i].ProjectItems.Cast<ProjectItem>().Select(x => x.SubProject).OfType<Project>());
                }
            }

            foreach (Project project in list)
            {
                if (project.Name == projectName)
                {
                    foundProject = project;
                    break;
                }
            }

            if (foundProject == null)
            {
                throw new InvalidOperationException(string.Format("Project {0} not exists in the solution.", projectName));
            }

            return foundProject;
        }

        /// <summary>
        /// Get the path of the folder where the solution is located.
        /// </summary>
        /// <returns>Path as <see cref="string"/>.</returns>
        private string GetSolutionDirectoryPath()
        {
            var fullName = this.dte.Solution.FullName;

            var directory = Path.GetDirectoryName(fullName);

            return directory;
        }

        /// <summary>
        /// Get the path of the folder where this file is located.
        /// </summary>
        /// <returns>Path as <see cref="string"/>.</returns>
        private string GetTemplateFileProjectDirectoryPath()
        {
            var currentProjectName = this.dte.Solution.FindProjectItem(this.host.TemplateFile).ContainingProject.Name;

            var project = this.FindProjectByName(currentProjectName);

            var directory = Path.GetDirectoryName(project.FullName);

            return directory;
        }

        /// <summary>
        /// Get the full path of a project item.
        /// </summary>
        /// <param name="projectItem"><see cref="ProjectItem"/>.</param>
        /// <returns>Path as <see cref="string"/>.</returns>
        private string GetProjectItemPath(ProjectItem projectItem)
        {
            var path = projectItem
                .Properties
                .Item("FullPath")
                .Value
                .ToString();

            return path;
        }

        /// <summary>
        /// Get the path of the folder where project item is located.
        /// </summary>
        /// <param name="projectName">Project name without extension.</param>
        /// <returns>Path as <see cref="string"/>.</returns>
        private string GetProjectDirectoryPath(string projectName)
        {
            var project = this.FindProjectByName(projectName);

            var directory = Path.GetDirectoryName(project.FullName);

            return directory;
        }

        /// <summary>
        /// Get interface for the host that transforms text template.
        /// </summary>
        /// <returns><see cref="dte"/></returns>
        private DTE GetHostServiceProvider()
        {
            var hostServiceProvider = this.host as IServiceProvider;

            DTE dteHost = null;

            if (hostServiceProvider != null)
            {
                dteHost = hostServiceProvider.GetCOMService(typeof(DTE)) as DTE;
            }

            return dteHost;
        }

        /// <summary>
        /// Adding a file to the solution (.NET Full Framework stuff).
        /// </summary>
        /// <param name="projectName">Project name without extension.</param>
        /// <param name="absolutePath">Absolute path of file.</param>
        /// <param name="fileName">Filename with extension.</param>
        private void AddMissingFileToProject(string projectName, string absolutePath, string fileName)
        {
            if (string.IsNullOrEmpty(projectName))
            {
                var projItem = this.dte.Solution.FindProjectItem(this.host.TemplateFile);
                var prj = projItem.ContainingProject;
                projectName = prj.Name;
            }

            var projectItems = this.FindProjectByName(projectName).ProjectItems;

            var exists = this.HasProjectItem(absolutePath, fileName);

            var combinedPath = Path.Combine(absolutePath, fileName);

            if (!exists)
            {
                projectItems.AddFromFile(combinedPath);
            }
        }

        /// <summary>
        /// Check if Project item exists.
        /// </summary>
        /// <param name="absolutePath">Absolute path of file.</param>
        /// <param name="fileName">Filename with extension.</param>
        /// <returns></returns>
        private bool HasProjectItem(string absolutePath, string fileName)
        {
            var combinedPath = Path.Combine(absolutePath, fileName);
            var exists = this.dte.Solution.FindProjectItem(combinedPath) != null;
            return exists;
        }

        /// <summary>
        /// Remove Project item from the Solution.
        /// </summary>
        /// <param name="projectPath">Absolute path of project.</param>
        /// <param name="fileName">Filename with extension.</param>
        private void RemoveFileFromProject(string projectPath, string fileName)
        {
            var combinedPath = Path.Combine(projectPath, fileName);

            var item = this.dte.Solution.FindProjectItem(combinedPath);

            if (item != null)
            {
                item.Remove();
            }
        }

        /// <summary>
        /// Set setting if available.
        /// </summary>
        /// <param name="projectItem"><see cref="ProjectItem"/>.</param>
        /// <param name="propertyName">Property name as <see cref="string"/>.</param>
        /// <param name="value">Value as <see cref="object"/>.</param>
        private void SetPropertyValue(ProjectItem projectItem, string propertyName, object value)
        {
            var property = projectItem.Properties.Item(propertyName);

            if (property != null)
            {
                this.logger.Information("property {0} exists", propertyName);
                property.Value = value;
            }
        }
    }
    
    /// <summary>
    /// Properties for project item
    /// </summary>
    public sealed class FileProperties
    {
        public FileProperties()
        {
            this.TemplateParameter = new Dictionary<string, object>();
        }

        public string CustomTool { get; set; }
        public int? CopyToOutputDirectory { get; set; }
        public int? BuildAction { get; set; }
        public Dictionary<string, object> TemplateParameter { get; set; }

        internal string BuildActionString
        { 
            get
            { 
                return this.BuildAction.ToString();
            }
        }

        internal Dictionary<string, object> ToDictionary()
        {
            var propertyDictionary = new Dictionary<string, object>();

            if (!string.IsNullOrEmpty(this.CustomTool))
            {
                propertyDictionary.Add(Property.CustomTool, this.CustomTool);
            }

            if (this.CopyToOutputDirectory.HasValue)
            {
                propertyDictionary.Add(Property.CopyToOutputDirectory, this.CopyToOutputDirectory.Value);
            }

            if (this.BuildAction.HasValue)
            {
                propertyDictionary.Add(Property.BuildAction, this.BuildAction);
            }

            foreach (var prop in this.TemplateParameter)
            {
                propertyDictionary.Add(prop.Key, prop.Value);
            }

            return propertyDictionary;
        }
    }

    /// <summary>
    /// Predefined properties.
    /// </summary>
    public abstract class Property
    {
        public const string CopyToOutputDirectory = "CopyToOutputDirectory";
        public const string BuildAction = "BuildAction";
        public const string CustomTool = "CustomTool";
        public const string CanOverwriteExistingFile = "CanOverwriteExistingFile";
    }

    /// <summary>
    /// Predefined property values (CopyToOutputDirectory).
    /// </summary>
    public abstract class CopyToOutputDirectory
    {
        public const int DoNotCopy = 0;
        public const int CopyAlways = 1;
        public const int CopyIfNewer = 2;
    }

    /// <summary>
    /// Predefined property values (CanOverwriteExistingFile).
    /// </summary>
    public abstract class CanOverwriteExistingFile
    {
        public const bool Yes = true;
        public const bool No = false;
    }

    /// <summary>
    /// Predefined property values (BuildAction).
    /// </summary>
    public abstract class BuildAction
    {
        public const int None = 0;
        public const int Compile = 1;
        public const int Content = 2;
        public const int EmbeddedResource = 3;
    }

    /// <summary>
    /// Info wrapper of the generated files.
    /// </summary>
    public class GeneratedInfo
    {
        public List<FileToGenerate> FilesToGenerate { get; set; }

        public bool HasContent()
        {
            return this.FilesToGenerate != null && this.FilesToGenerate.Any();
        }
    }

    /// <summary>
    /// Info for a generated file.
    /// </summary>
    public class FileToGenerate
    {
        public string Filename { get; set; }

        public string Project { get; set; }

        public string Path { get; set; }

        public Dictionary<string, object> Properties { get; set; }

        /*[JsonIgnore]*/
        public string Content { get; set; }

        /*[JsonIgnore]*/
        public string AbsolutePath { get; set; }
    }

    /// <summary>
    /// Logger for detailed information
    /// Note: NET 4 syntax to avoid errors in error list
    /// </summary>
    public class Logger
    {
        private readonly StringBuilder log;
        private readonly EnvDTE.DTE dte;
        private readonly string logSuffix;

        public Logger(EnvDTE.DTE dte, string suffix)
        {
            this.dte = dte;
            this.log = new StringBuilder();
            this.logSuffix = suffix;
        }
    
        public string Log
        {
            get
            {
                return this.log.ToString();
            }
        }

        public void Information(string info)
        {
            string line = string.Format("{0} {1} | {2}", DateTime.Now, this.logSuffix, info);
            this.WriteToOutput(line);
            this.log.AppendLine(line);
        }

        public void Information(string info, params object[] parameters)
        {
            string line = string.Format(info, parameters);
            this.Information(line);
        }

        private void WriteToOutput(string output)
        {
            if (dte == null)
            {
                return;
            }

            try
            {
                var window = dte.Windows.Item(EnvDTE.Constants.vsWindowKindOutput);
                var outputWindow = window.Object as EnvDTE.OutputWindow;
 
                outputWindow.ActivePane.Activate();
                outputWindow.ActivePane.OutputString(output);
                outputWindow.ActivePane.OutputString("\n");
            }
            catch (Exception ex)
            {
                this.log.AppendLine("WriteToOutput | Unable to obtain OutputWindow object");
                this.log.AppendLine(ex.StackTrace);
            }
        }
    } 

    /// <summary>
    /// For backward compatibility scenarios only
    /// </summary>
    public class TemplateFileManager : T4FileManager
    {
        public TemplateFileManager(GeneratedTextTransformation textTransformation)
        : base(textTransformation.GenerationEnvironment, textTransformation.Host) {}

        public TemplateFileManager(StringBuilder textTransformation, ITextTemplatingEngineHost host)
        : base (textTransformation, host) {}
    }

/// <summary>
/// Replaces Newtonsoft.Json for better functionality
/// with VS 17.11+ (Dependency issues with fresh installations of Visual Studio)
/// </summary>
public static class TemplateInfoSerializer
{
	public static string Serialize(GeneratedInfo info)
	{
		var sb = new StringBuilder();
		sb.Append("{\"FilesToGenerate\":[");

		for (int i = 0; i < info.FilesToGenerate.Count; i++)
		{
			if (i > 0) sb.Append(",");
			SerializeFileToGenerate(info.FilesToGenerate[i], sb);
		}

		sb.Append("]}");
		return sb.ToString();
	}

	private static void SerializeFileToGenerate(FileToGenerate file, StringBuilder sb)
	{
		sb.Append("{");
		sb.AppendFormat("\"Filename\":\"{0}\",", EscapeJsonString(file.Filename));
		sb.AppendFormat("\"Project\":\"{0}\",", EscapeJsonString(file.Project));
		sb.AppendFormat("\"Path\":\"{0}\",", EscapeJsonString(file.Path));
		sb.Append("\"Properties\":{");

		var propKeys = new List<string>(file.Properties.Keys);
		for (int i = 0; i < propKeys.Count; i++)
		{
			if (i > 0) sb.Append(",");
			var key = propKeys[i];
			var value = file.Properties[key];
			sb.AppendFormat("\"{0}\":{1}", EscapeJsonString(key), SerializeValue(value));
		}

		sb.Append("}}");
	}

	private static string SerializeValue(object value)
	{
		if (value == null) return "null";

		if (value is string)
			return string.Format("\"{0}\"", EscapeJsonString((string)value));

		if (value is bool)
			return ((bool)value).ToString().ToLowerInvariant();

		if (value is int || value is long || value is float || value is double)
			return Convert.ToString(value);

		return string.Format("\"{0}\"", EscapeJsonString(value.ToString()));
	}

	private static string EscapeJsonString(string str)
	{
		if (string.IsNullOrEmpty(str)) return string.Empty;

		StringBuilder sb = new StringBuilder();
		foreach (char c in str)
		{
			switch (c)
			{
				case '\"': sb.Append("\\\""); break;
				case '\\': sb.Append("\\\\"); break;
				case '\b': sb.Append("\\b"); break;
				case '\f': sb.Append("\\f"); break;
				case '\n': sb.Append("\\n"); break;
				case '\r': sb.Append("\\r"); break;
				case '\t': sb.Append("\\t"); break;
				default:
					if (c < 32)
					{
						// Verwende String.Format anstelle von String-Interpolation
						sb.AppendFormat("\\u{0:X4}", (int)c);
					}
					else
					{
						sb.Append(c);
					}
					break;
			}
		}

		return sb.ToString();
	}

	public static GeneratedInfo Deserialize(string json)
	{
		var info = new GeneratedInfo { FilesToGenerate = new List<FileToGenerate>() };
		int index = 0;

		index = json.IndexOf('[', json.IndexOf("FilesToGenerate")) + 1;

		while (index < json.Length && json[index] != ']')
		{
			index = SkipWhitespace(json, index);
			if (json[index] == '{')
			{
				var file = DeserializeFileToGenerate(json, ref index);
				info.FilesToGenerate.Add(file);
			}
			else if (json[index] == ',')
			{
				index++;
			}
			else
			{
				break;
			}
		}

		return info;
	}

	private static FileToGenerate DeserializeFileToGenerate(string json, ref int index)
	{
		var file = new FileToGenerate { Properties = new Dictionary<string, object>() };

		index++;
		while (index < json.Length && json[index] != '}')
		{
			index = SkipWhitespace(json, index);
			if (json[index] == '"')
			{
				// Statt Tuple-Deconstruction verwenden wir eine Hilfsmethode, die key und value als separate Ausgaben liefert
				string key;
				object value;
				ReadKeyValue(json, ref index, out key, out value); // Verwende out-Parameter

				switch (key)
				{
					case "Filename":
						file.Filename = value as string;
						break;
					case "Project":
						file.Project = value as string;
						break;
					case "Path":
						file.Path = value as string;
						break;
					case "Properties":
						if (value is Dictionary<string, object>)
						{
							file.Properties = (Dictionary<string, object>)value;
						}
						break;
				}
			}
			else if (json[index] == ',')
			{
				index++;
			}
			else
			{
				break;
			}
		}

		index++;
		return file;
	}

	private static void ReadKeyValue(string json, ref int index, out string key, out object value)
	{
		key = ReadString(json, ref index); // Liest den Schlüssel
		index = json.IndexOf(':', index) + 1;
		index = SkipWhitespace(json, index);
		value = ReadValue(json, ref index); // Liest den Wert
	}

	private static string ReadString(string json, ref int index)
	{
		StringBuilder sb = new StringBuilder();
		index++; // Skip opening quote
		while (index < json.Length)
		{
			char c = json[index++];
			if (c == '"')
			{
				break; // End of string
			}
			if (c == '\\' && index < json.Length)
			{
				char next = json[index++];
				switch (next)
				{
					case '"': sb.Append('"'); break;
					case '\\': sb.Append('\\'); break;
					case '/': sb.Append('/'); break;
					case 'b': sb.Append('\b'); break;
					case 'f': sb.Append('\f'); break;
					case 'n': sb.Append('\n'); break;
					case 'r': sb.Append('\r'); break;
					case 't': sb.Append('\t'); break;
					case 'u':
						if (index + 3 < json.Length)
						{
							string hex = json.Substring(index, 4);
							sb.Append((char)Convert.ToUInt16(hex, 16));
							index += 4;
						}
						break;
					default:
						sb.Append(next);
						break;
				}
			}
			else
			{
				sb.Append(c);
			}
		}
		return sb.ToString();
	}

	private static object ReadValue(string json, ref int index)
	{
		index = SkipWhitespace(json, index);
		if (index >= json.Length) return null;

		switch (json[index])
		{
			case '"': return ReadString(json, ref index);
			case '{': return ReadObject(json, ref index);
			case '[': return ReadArray(json, ref index);
			case 't':
				if (json.Substring(index, 4) == "true") { index += 4; return true; }
				break;
			case 'f':
				if (json.Substring(index, 5) == "false") { index += 5; return false; }
				break;
			case 'n':
				if (json.Substring(index, 4) == "null") { index += 4; return null; }
				break;
			default:
				if (char.IsDigit(json[index]) || json[index] == '-')
					return ReadNumber(json, ref index);
				break;
		}

		throw new FormatException(string.Format("Unexpected character in JSON at position {0}", index));
	}

	private static Dictionary<string, object> ReadObject(string json, ref int index)
	{
		var result = new Dictionary<string, object>();
		index++;

		while (index < json.Length && json[index] != '}')
		{
			index = SkipWhitespace(json, index);
			if (json[index] == '"')
			{
				string key;
				object value;
				ReadKeyValue(json, ref index, out key, out value);
				result[key] = value;
			}
			else if (json[index] == ',')
			{
				index++;
			}
			else
			{
				break;
			}
		}

		index++;
		return result;
	}

	private static List<object> ReadArray(string json, ref int index)
	{
		var result = new List<object>();
		index++;

		while (index < json.Length && json[index] != ']')
		{
			index = SkipWhitespace(json, index);
			if (json[index] != ']')
			{
				var value = ReadValue(json, ref index);
				result.Add(value);
			}
			if (json[index] == ',')
			{
				index++;
			}
		}

		index++;
		return result;
	}

	private static double ReadNumber(string json, ref int index)
	{
		int startIndex = index;
		while (index < json.Length && "0123456789+-.eE".IndexOf(json[index]) != -1)
		{
			index++;
		}
		return double.Parse(json.Substring(startIndex, index - startIndex));
	}

	private static int SkipWhitespace(string str, int startIndex)
	{
		while (startIndex < str.Length && char.IsWhiteSpace(str[startIndex]))
		{
			startIndex++;
		}
		return startIndex;
	}
}
#>